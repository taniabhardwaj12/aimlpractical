#include <iostream>
#include <cstdlib>
#include <chrono>
#include <random>
using namespace std;
void max_heapify(int a[], int n, int i) {
 int largest = i;
 int l = 2 * i + 1;
 int r = 2 * i + 2;
 if (l < n && a[l] > a[largest])
 largest = l;
 if (r < n && a[r] > a[largest])
 largest = r;
 if (largest != i) {
 swap(a[i], a[largest]);
 max_heapify(a, n, largest);
 }
}
void build_max_heap(int a[], int n) {
 for (int i = n / 2 - 1; i >= 0; i--)
 max_heapify(a, n, i);
}
void heap_sort(int a[], int n) { 
build_max_heap(a, n);
 for (int i = n - 1; i > 0; i--) {
 swap(a[0], a[i]);
 max_heapify(a, i, 0);
 }
}
int main() {
 int n;
 cout << "Enter the size of the array: ";
 cin >> n;
 int a[n];
 random_device rd;
 mt19937 gen(rd());
 uniform_int_distribution<> dis(1, n);
 for (int i = 0; i < n; i++)
 a[i] = dis(gen);
 auto start = chrono::high_resolution_clock::now();
 heap_sort(a, n);
 auto end = chrono::high_resolution_clock::now();
 chrono::duration<double, micro> elapsed = end - start;
 for (int i = 0; i < n; i++)
 cout << a[i] << " ";
 cout << "\nTime taken to sort the array: " << elapsed.count()
<< " Âµs" << endl;
 return 0; 
 }
