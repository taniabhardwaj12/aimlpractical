#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;
int dist[5][5] = {
{0, 14, 12, 10, 7},
{14, 0, 9, 6, 13},
{12, 9, 0, 8, 5},
{10, 6, 8, 0, 11},
{7, 13, 5, 11, 0}
};
string nodeName[5] = {"A", "B", "C", "D", "E"};
int main() {
vector<int> nodes = {1, 2, 3, 4};
int minCost = INT_MAX;
vector<int> bestPath;
do {
int cost = 0;
int prev = 0; // Start from A
for (int i = 0; i < nodes.size(); i++) {
cost += dist[prev][nodes[i]];
prev = nodes[i];
} 
cost += dist[prev][0]; // Return to A
if (cost < minCost) {
minCost = cost;
bestPath = nodes;
}
} while (next_permutation(nodes.begin(), nodes.end()));
cout << "Optimal Path: A -> ";
for (int node : bestPath) {
cout << nodeName[node] << " -> ";
}
cout << "A" << endl;
cout << "Minimum Cost: " << minCost << endl;
return 0;
}
