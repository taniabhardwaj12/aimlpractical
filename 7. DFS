#include <iostream>
#include <vector>
#include <limits>
using namespace std;
class Graph {
int V; // Number of vertices
vector<vector<int>> adj; // Adjacency list
vector<string> color;
vector<int> pi;
vector<int> d;
vector<int> f;
int time;
public:
Graph(int V) {
this->V = V;
adj.resize(V);
color.resize(V, "WHITE");
pi.resize(V, -1);
d.resize(V, 0);
f.resize(V, 0);
time = 0;
}
void addEdge(int u, int v) {
adj[u].push_back(v);
adj[v].push_back(u); // Assuming an undirected graph
}
void DFS() {
for (int u = 0; u < V; u++) {
color[u] = "WHITE";
pi[u] = -1;
}
time = 0;
for (int u = 0; u < V; u++) {
if (color[u] == "WHITE") {
DFS_VISIT(u);
}
}
// Displaying the results
cout << "Vertex\tDiscovery Time\tFinish Time\tParent" <<
endl;
for (int i = 0; i < V; i++) {
cout << i << "\t" << d[i] << "\t\t" << f[i] << "\t\t"
<< pi[i] << endl;
}
}
void DFS_VISIT(int u) {
color[u] = "GRAY";
time++;
d[u] = time;
for (int v : adj[u]) {
if (color[v] == "WHITE") {
pi[v] = u;
DFS_VISIT(v);
} 
}
color[u] = "BLACK";
time++;
f[u] = time;
}
};
int main() {
int V = 6; // Number of vertices
Graph g(V);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
g.addEdge(2, 4);
g.addEdge(3, 5);
g.addEdge(4, 5);
cout << "DFS traversal of the graph:" << endl;
g.DFS();
return 0;
}
