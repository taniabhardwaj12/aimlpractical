#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct Edge {
int u, v, weight;
bool operator<(const Edge& other) const {
return weight < other.weight;
}
};
class DisjointSet {
vector<int> parent, rank;
public:
DisjointSet(int n) {
parent.resize(n);
rank.resize(n, 0);
for (int i = 0; i < n; ++i)
parent[i] = i;
}
int findSet(int v) {
if (v != parent[v])
parent[v] = findSet(parent[v]);
return parent[v];
}
void unionSets(int u, int v) { 
u = findSet(u);
v = findSet(v);
if (u != v) {
if (rank[u] < rank[v])
parent[u] = v;
else if (rank[u] > rank[v])
parent[v] = u;
else {
parent[v] = u;
rank[u]++;
}
}
}
};
vector<Edge> kruskal(int V, vector<Edge>& edges) {
sort(edges.begin(), edges.end());
DisjointSet ds(V);
vector<Edge> mst;
for (const Edge& e : edges) {
if (ds.findSet(e.u) != ds.findSet(e.v)) {
mst.push_back(e);
ds.unionSets(e.u, e.v);
}
}
return mst;
}
int main() { 
int V = 4;
vector<Edge> edges = {
{0, 1, 10},
{0, 2, 6},
{0, 3, 5},
{1, 3, 15},
{2, 3, 4}
};
vector<Edge> mst = kruskal(V, edges);
cout << "Edges in MST:\n";
for (const Edge& e : mst) {
cout << e.u << " - " << e.v << " : " << e.weight << endl;
}
return 0;
}
