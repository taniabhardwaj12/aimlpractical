#include <iostream>
#define N 8
using namespace std;
bool solutionFound = false;
void printSolution(int board[N][N]) {
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++)
cout << (board[i][j] ? "Q " : ". ");
cout << endl;
}
cout << endl;
}
bool isSafe(int board[N][N], int row, int col) {
for (int i = 0; i < col; i++) {
for (int j = 0; j < N; j++) {
if (board[j][i]) {
if (j == row || (j - i == row - col) || (j + i ==
row + col))
return false;
}
}
}
return true;
}
bool solveNQueens(int board[N][N], int col) {
if (col >= N) { 
printSolution(board);
solutionFound = true;
return true;
}
for (int i = 0; i < N; i++) {
if (isSafe(board, i, col)) {
board[i][col] = 1;
if (solveNQueens(board, col + 1)) return true;
board[i][col] = 0;
}
}
return false;
}
int main() {
int board[N][N] = {0};
if (!solveNQueens(board, 0))
cout << "No solution exists\n";
return 0;
}
