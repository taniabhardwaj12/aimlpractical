#include <iostream>
#include <queue>
#include <vector>
#include <limits>
using namespace std;
class Graph {
int V; // Number of vertices
vector<vector<int>> adj; // Adjacency list
public:
Graph(int V) {
this->V = V;
adj.resize(V);
}
void addEdge(int u, int v) {
adj[u].push_back(v);
adj[v].push_back(u); // Assuming an undirected graph
}
void BFS(int s) {
vector<string> color(V, "WHITE");
vector<int> d(V, numeric_limits<int>::max());
vector<int> pi(V, -1);
color[s] = "GRAY";
d[s] = 0;
pi[s] = -1;
queue<int> Q;
Q.push(s);
while (!Q.empty()) {
int u = Q.front();
Q.pop();
for (int v : adj[u]) {
if (color[v] == "WHITE") {
color[v] = "GRAY";
d[v] = d[u] + 1;
pi[v] = u;
Q.push(v);
}
}
color[u] = "BLACK";
}
// Displaying the results
cout << "Vertex\tDistance\tParent" << endl;
for (int i = 0; i < V; i++) {
cout << i << "\t" << (d[i] ==
numeric_limits<int>::max() ? -1 : d[i]) << "\t\t" << pi[i] <<
endl;
}
}
};
int main() {
int V = 6; // Number of vertices
Graph g(V);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
g.addEdge(2, 4);
g.addEdge(3, 5);
g.addEdge(4, 5);
cout << "BFS starting from vertex 0:" << endl;
g.BFS(0);
return 0;
}
